#!/bin/bash -e

# Cache file which is stored in ~/.kube as a lot of kubectl things are
FILE_LOCATION=~/.kube/kcn_cache
COMMAND_LINE_OPTIONS_HELP="A kubectl plugin which makes it simple to ssh into nodes within your cluster.

This script heavily relies on your ssh_config to determine how the connections are made to the nodes which allows easy connections to the nodes based on your unique networking configuration.

Additonal information can be found here: https://github.com/marjamis/kubectl-kcn

Options:
  -d: Enable the scripts debug mode. i.e. Using Bash's set -x
  -i: Will use the nodes private IP within AWS.
  -p: Will find and use the nodes public IP within AWS.
  -s: Will use the node name as the destination for ssh.
  -l: An interactive method of selecting a node and how to ssh into it.
  -r: Randomly select a node to connect to
  -n: Explicitly passing in a value for the node to be use to connect to
  -h: Displays this help.

Usage: kubectl n [flags] [node]"

# Errors
declare -A ERRORS=(
["E_OPTERROR_UNKNOWN"]="1" # Error 1 - Unknown parameter supplied
["E_OPTERROR_NOOPTION"]="2" # Error 2 - No option specified
["E_OPTERROR_NOIP"]="3" # Error 3 - No IP found for selection
["E_OPTERROR_NONODES"]="4" # Error 4 = No nodes are in the cluster to select from
["E_OPTERROR_NOMODESELECTED"]="5" # Error 5 = No mode selected for SSH
["E_OPTERROR_NOHOST"]="6" # Error 6 = No host found to connect to
)

# Global Variables
# Used for populated node information once and in a consistent manner and shouldn't be touched
NODES=""
SSH_CONNECTION_TYPE="-1"

function check_cache {
  # $1 - host registered to k8s
  # $2 - private or public ip requested
  data=$(grep "$1,$2" $FILE_LOCATION  2> /dev/null | awk -F\, '{print $3}')
  if [ "$data" != "" ] ; then
    >&2 echo "Cache hit for $1"
  else
    >&2 echo "Cache miss for $1"
  fi

  echo "$data"
}

function getAndUseIp {
  # $1 - hostname registered to k8s
  # $2 - public or private ip requested
  ip=$(check_cache "$1" "$2")
  if [ "$ip" == "" ]; then
    if [ "$2" == "public" ] ; then
      region=$(echo $1 | awk -F\. '{print $2}')
      ip=$(aws ec2 describe-network-interfaces --query NetworkInterfaces[].Association.PublicIp --output text --filter Name=private-dns-name,Values=$1 --region $region)
    elif [ "$2" == "private" ] ; then
      ip=$(kubectl get no $1 --no-headers=true --output=custom-columns=IP:.status.addresses[0].address)
    fi

    if [ "$1" == "" ] ; then
      error E_OPTERROR_NOIP
    fi

    printf "%s,%s,%s\n" "$1" "$2" $ip >> $FILE_LOCATION
  fi

  printf "Using $2 IP...\n\n"
  ssh $ip
}

function loop_nodes {
  # $1 - string of noPrint to disable string output
  IFS=$'\n'
  count=0
  for i in $(kubectl get no --no-headers=true --output=custom-columns=NAME:.metadata.name,VERSION:.status.nodeInfo.kubeletVersion); do
    if [ "$1" != "noPrint" ] ; then
      printf "[$count] $i\n"
    fi
    NODES+=("$i")
    count=$(echo "$count+1" | bc)
  done

  if [ "$count" -eq 0 ] ; then
    error E_OPTERROR_NONODES
  fi
}

function loop_methods {
  count=0
  for i in private-ip public-ip hostname; do
    printf "[$count] $i\n"
    count=$(echo "$count+1" | bc)
  done
}

function method_selection {
  # $1 - host
  if [ "$1" == "" ] ; then
    error E_OPTERROR_NOHOST
  fi

  method=$SSH_CONNECTION_TYPE
  if [ "$method" == "-1" ] ; then
    loop_methods
    read -p "Which method of connecting: " method
  fi

  case $method in
    0) getAndUseIp $1 private ;;
    1) getAndUseIp $1 public ;;
    2) ssh $1 ;;
    *) printf "Incorrect value/s specified." ;;
  esac
}

function list_nodes {
  loop_nodes
  read -p "Specify a number for a node to connect to: " node
  host=$(echo ${NODES[$node+1]} | awk '{print $1}')
  method_selection $host
}

function random_node {
  loop_nodes "noPrint"
  host=$(echo ${NODES[$(((RANDOM % $count) + 1))]} | awk '{print $1}')
  method_selection $host
}

function help {
  echo "Usage: kubectl n -h for help";
  echo "$COMMAND_LINE_OPTIONS_HELP"
}

function error {
  printf "Error: $1 \nPrinting help...\n\n"
  help
  exit ${ERRORS[$1]}
}

# Used to set a whole bunch of configurations
while getopts "siprhn:led" flag ; do
  case "$flag" in
    d) set -x ;; # Turns on bash verbose mode for the script
    i) SSH_CONNECTION_TYPE=0 ;; # To use private IP address with SSH
    p) SSH_CONNECTION_TYPE=1 ;; # To use public IP with SSH
    s) SSH_CONNECTION_TYPE=2 ;; # To use the nodename with SSH
    l) NODE_SELECTION="list" ;; # Interactive selections
    r) NODE_SELECTION="random" ;; # Random node selection
    n) NODE_SELECTION="ssh"; HOST="$OPTARG" ;; # Specifying the node to connect to
    e) env; exit ;; # Secret option to display environment variables
    h) help ; exit ;;
    \?) error E_OPTERROR_UNKNOWN ;;
    *) error E_OPTERROR_NOOPTION ;;
  esac
done

case "$NODE_SELECTION" in
  "list")   list_nodes ;;
  "random") random_node ;;
  "ssh")    method_selection $HOST ;;
  *)        error E_OPTERROR_NOMODESELECTED
esac
